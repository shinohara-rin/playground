hi friends my name is Tris and this is no boilerplate focusing on Fast technical videos this is my guide on how to learn rust and is the way I teach it to my patreons in our mentoring sessions I have a lot of tips on how to get up to speed fast and we'll start with the primary sources everything you see in this video from the script to the images are part of a markdown document available on GitHub under a public domain license rust isn't difficult it's unfamiliar this is the first lesson you may have noticed that my videos are mostly hype by Design most comments on my videos are by total rust to newbies some are even new to programming and yet are so excited by what they see if you don't yet understand rust and someone explains it clearly as I try to it seems like magic rust is the 19th most popular language according to GitHub projects and stack Overflow tags but the scale is not linear there is a lot of way to do if it is not to suffer the same fate as Haskell and common lisp I want rust to achieve escape velocity back in 2020 I crashed out of learning rust Twice first time due to multiple string types Pascal's biggest mistake made again I thought to myself and the second due to lifetimes at the time I had a great mentor shout out to Alex who picked me up and helped me back on the path most people don't have this luxury they need the excitement that I try to help with in my hype videos to break through I will eventually run out of hype topics and move on to slightly more detail but first there's a few million developers I want to send to rustup.rs let's start there if you're on Mac or Linux or WSL run this command in the terminal if you're on Windows and can't run WSL then download and run the installer probably the 64-bit version Linux is the native operating system of the internet and I would recommend that Windows users install Microsoft's windows subsystem for Linux WSL to get access to this incredible world next you need the core transvert that is required learning for my students the three pillars of my recommended syllabus are one the rust programming language book which from now on we will just call the book 2. rust by example excellent supplementary reading and three rustlings and interactive codecata system one of the best I've ever used though there are many other great ways to learn rust I recommend starting with these three because they are so tightly bound together in a way you might have missed starting with rustlings it's written in almost the same order as the book this is by Design they are made to be consumed together rust by example is less linearly linked to the book though it's partially in the same order I read it as a supplement to the book it includes high level tips on idiomatic error handling how to organize your code into modules and testing strategies these are all covered in the book but rust by example is more opinionated on how to use them keep all three of these tools together we'll get back to the main quest in a moment but first a quiz from today's sponsor razor secure what data center travels at 100 miles an hour reconfigures every IP when it attaches or detaches to other data centers all without a reliable power source or internet connection and must never fail the answer a train Razer secure is a 50 person startup bringing cutting-edge security Tech to the rapidly advancing world of rail they do this through a rust intrusion detection and monitoring agent running on board a cloud environment running kubernetes Python microservices and event-based data processing and a yorkto hardware platform running custom embedded Linux their team and customers span Europe and North America so if you've taken a train journey here then Razer secure security systems may have already kept you safe if you're excited by this challenge in Tech then they are very interested in speaking to you as they are hiring now the company is fully remote so wherever you are based they offer challenging work in an interesting field with some awesome technology and a highly collaborative team with flexible working practices find out more about jobs at Razer secure at razorskill.com forward slash careers my thanks to razor secure for their support of this channel back to the side quest this is ultra learning by Scott H young not sponsored a very good book on the meta process of learning to learn you should read it or listen to it on audiobook as I did in chapter 8 young highlights a study where it seemed that students who took the exam and failed before studying did far better than those who only studied and then took the exam he calls this procedure test to learn and it makes a lot of sense it's like placing a number of boxes in your mind labeled with the information that you would like to be there facts figures how lifetime annotations work etc then when you are studying later on you more readily absorb the information because you are already looking for it keep this in mind when I tell you my next tip I recommend reading the Rust book from cover to cover as fast as possible and without stopping to do the exercises if you come across something you don't understand mentally note it and move on to the next chapter the point is to pass the words through your eyeball compiler and not worry too much about how many errors you get then when you have finished go back to the start and work through at your normal Pace but read the Brown University version with interactive quizzes you can now install rustlings rustlings will check that you've got everything set up correctly get rust cargo the installer is a great sanity check to avoid pain later rustlings is a Code catastyle system that you can think of as a suite of failing unit tests that you slowly work through fixing in a test driven development way here is the first example fixing a hello world wrestlings starts out extremely simply and ramps up slowly even non-programmers could start this way and Veterans will speed through the early questions quickly though starting simple they follow the book all the way through lifetimes smart pointers and threads note that the rustling's Watcher the output of which we are seeing here has some extra functionality not just Auto refreshing output from the compiler each exercise has a hint accessed by simply typing hint into the Watcher as I did here rustlings exercises are Cutters Cutters a term borrowed from Japanese martial arts are something you practice over and over again to build muscle memory musicians do the same thing at time of writing there are 95 rustlings caters when you've done them all it is time to choose your favorites to redo regularly I recommend weekly keep your muscle memory Fresh side quest 3 Haskell rust is a hybrid imperative and functional language the compiler was originally written in O camel this means in addition to the punched card analog of statements we can also use many features of functional languages the most obvious of these is the pervasive use of the iterator pattern it is possible to write rust mostly in the way you've been writing python or JavaScript or Java but you'll get most out of it if you adopt the functional principles of higher order functions and immutability rust is flexible and doesn't force you to write in a functional style Haskell however is inflexible in the extreme and you have no choice but to learn it and learn it fast have a look at either learn your Haskell or real world Haskell or both again you can mostly read through these quickly your package manager will have the Haskell Rebel which is called ghci and any version it installs will be fine for experimentation learning Haskell will teach you about mapping filtering folding carrying matching and many other words to describe your algorithms in Rust which are abandoned in other languages that just use for loops and if statements you might even learn what a monad is a huge turn off for me coming from python was rust's syntax there's so much more than I was used to in other languages the compiler can't help you very much so moving fast and breaking things is the best way to develop any syntax gets in the way in Rust the compiler is your best friend but you must be nice to it for it to be nice to you here's how I think the difficulty in learning say JavaScript and rust compares to each other I've picked JavaScript because I want to make as many friends on the internet as possible but the general relationship is the same for Python and Java and many others too rust upfronts all the work that you would need to do in other languages later on to get scalability and performance and safety and in making you deal with them at the start the language debt doesn't spiral as you increase complexity in other languages simple things are easy and complex things are possible in Rust simple things are possible and complex things are easy and this is how it should be I don't care how easy it is to do simple things that doesn't impress me anymore I want a language that can stay by my side as I make extremely complex distributed systems that run at c-speed and don't wake me up at night keep in mind through all your early learning you only have to learn rust once JavaScript developers have to keep learning JavaScript every single day Edge case after Edge case after Edge case framework after framework to try and manage these edge cases it's exhausting rust offers another way but you have to work for it for example lifetime annotations specify how long a reference should live it's a minimum value that variables must live for before the borrow Checker knows it's safe to clean up this example is from chapter 10 of the book which states The Returned reference will be valid as long as both the parameters are valid we'll name the lifetime a and then add it to each reference it's very unfamiliar stuff right there's two ways to think about lifetimes as a liability or an asset I started off thinking about them as a liability something annoying I had to do to satisfy the compiler this is a totally fine way to start off with and I have some suggestions on how to learn lifetimes gradually in order one don't use references use ownership and share nothing passing variables into functions and if you need them later return them back out giving away ownership two copy and clone everything rust is 80 times faster than python you're probably not going to notice the performance hit three only use references when the compiler tells you to this will eventually teach you how to use them properly when you've done three a few times you're ready to move on the the intermediate way to think about lifetimes are not as an annoying piece of syntax but something to enrich the model of your data other languages allow you to model what your data is rust through lifetimes allows you to model when that's worth learning rust is shaping up to be the only language we may need for systems development front-end and back-end web development and bare metal too please ask any questions in the comments and I'll try to help and do join my Discord have fun talk to you next time if you would like to support my channel get early ad free and tracking free videos in VIP Discord access head to patreon.com forward slash no boilerplate if you're interested in transhumanism and hope Punk stories please check out my sci-fi podcast lost terminal or if urban fantasy is more your bag do listen to a strange and beautiful podcast I produce called modem Prometheus transcripts and compile checked markdown source code are available on GitHub links in the description and Corrections are in the pinned Errata comment thank you so much for watching talk to you on Discord